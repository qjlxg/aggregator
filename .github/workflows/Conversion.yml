name: Base64 Conversion

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 */8 * * *' # 每 8 小时运行一次

jobs:
  convert_to_base64:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x' # 使用 Python 3.x 的最新稳定版

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests PyYAML maxminddb # 保留必要的依赖

      - name: Run conversion script
        env: 
          BOT: ${{ secrets.BOT }}
          URL_LIST_REPO_API: ${{ secrets.URL_LIST_REPO_API }}
          CLASH_TEMPLATE_PATH: "clash_template.yml"
          ENABLE_CONNECTIVITY_TEST: "true"
          TCP_TIMEOUT: "1"
          TCP_RETRIES: "1"
          TCP_DELAY: "0.5"
          # MAX_WORKERS: "30" # 如果Python脚本内部有硬编码或默认值，可以考虑移除
          EXCLUDE_NODES_BY_SERVER: ""
          FAILED_URL_THRESHOLD: "3" # 如果URL更新逻辑在脚本内部处理，保留此项
          EXCLUDE_CHINA_NODES: "true"
          GEOIP_DB_PATH: "clash/Country.mmdb"
        run: python subscribe/convert_to_base64.py # 脚本直接运行，输出到控制台

      - name: Upload Generated Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: generated-clash-configs
          path: | # 只上传核心的配置文件
            base64.yaml
            base64.txt
          retention-days: 7

      - name: Commit and push changes (if any)
        if: success() # 只在前面的步骤都成功时才运行
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

          # 只添加核心的配置文件
          git add base64.txt base64.yaml || true # || true 避免在文件无变化时出错

          # 检查是否有待提交的更改
          if git diff --cached --exit-code --quiet; then
            echo "未检测到 base64.txt 或 base64.yaml 更改，跳过提交。"
          else
            REF_NAME=$(echo "${{ github.ref }}" | sed 's_refs/heads/__')
            echo "当前分支: ${REF_NAME}"

            # Fetch the latest changes from the remote before attempting to commit and push
            echo "Fetching latest changes from origin/${REF_NAME}..."
            git fetch origin "${REF_NAME}"

            # Rebase the local branch on top of the fetched remote branch
            echo "Rebasing local branch onto origin/${REF_NAME}..."
            git rebase "origin/${REF_NAME}"

            # 如果没有实际更改，git commit 会失败，加 || true 确保脚本不中断
            git commit -m "feat: 更新生成的 Clash 配置 (base64.yaml, base64.txt)" || true 

            echo "推送更改到 origin/${REF_NAME}..."
            # After rebase, a direct push should work without --force-with-lease
            git push origin "HEAD:${REF_NAME}"
          fi
