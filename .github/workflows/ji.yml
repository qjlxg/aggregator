name: ji # 工作流程的名称

on:
  workflow_dispatch: # 允许手动触发
  schedule:
    - cron: '0 3 * * *' # 每天凌晨3点 (UTC) 运行

jobs:
  update-subscribes-list: # 任务名称可以改得更贴切
    runs-on: ubuntu-latest # 运行在最新的 Ubuntu 环境上

    steps:
      - name: 检出代码 # Step 1: 获取仓库代码
        uses: actions/checkout@v4 # 使用 v4 版本的 checkout Action

      - name: 设置 Python 环境 # Step 2: 准备 Python 环境
        uses: actions/setup-python@v5 # 使用 v5 版本的 setup-python Action
        with:
          python-version: '3.x' # 使用最新的 Python 3 版本，或者指定 '3.9', '3.10', '3.11' 等
          # 如果需要，可以加上缓存以加速依赖安装
          # cache: 'pip'

      - name: 安装依赖 # Step 3: 安装 Python 脚本所需的库
        run: |
          python -m pip install --upgrade pip
          pip install requests beautifulsoup4 # 安装依赖库

      - name: 运行 Python 脚本 # Step 4: 执行您的核心脚本
        # run 命令会执行您指定的脚本文件
        run: python ji_github_sync.py # <-- 请确认您的脚本文件名是否是 ji_github_sync.py，如果不是请修改这里

        # 使用 env 块将您的 Secret 映射为脚本能读取的环境变量
        env:
          # 这里填写的环境变量名称，必须与您的 Python 脚本中 os.getenv() 读取的名称完全一致
          # 这些名称不以 GITHUB_ 开头，以符合 GitHub Secrets 的命名规则
          REPO_OWNER: ${{ secrets.REPO_OWNER }}
          REPO_NAME: ${{ secrets.REPO_NAME }}
          GIT_BRANCH: ${{ secrets.GIT_BRANCH }}
          CONFIG_PATH: ${{ secrets.CONFIG_PATH }}
          SUBSCRIBES_PATH: ${{ secrets.SUBSCRIBES_PATH }}
          BOT: ${{ secrets.BOT }} # BOT 令牌

      # 注意：原有的 "Commit and push changes" 步骤被移除了
      # 因为您的 Python 脚本 (ji_github_sync.py) 已经通过 GitHub API
      # 使用 BOT 令牌直接将更新后的 subscribes.txt 内容提交到仓库了，
      # 无需 GitHub Actions 在本地执行 git commit 和 git push。
