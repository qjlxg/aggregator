name: Test Proxy Nodes with Clash
on: [push, workflow_dispatch]
jobs:
  test-nodes:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v3

      - name: 安装 Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.x"

      - name: 安装 Clash
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          # 尝试获取 Clash 的最新发布版本
          API_URL="https://api.github.com/repos/Dreamacro/clash/releases/latest"
          API_RESPONSE=$(curl -s "$API_URL")
          echo "API Response:"
          echo "$API_RESPONSE" | jq '.' || echo "Failed to parse API response"
          
          # 检查是否有错误消息
          ERROR_MESSAGE=$(echo "$API_RESPONSE" | jq -r '.message // empty')
          if [ "$ERROR_MESSAGE" == "Not Found" ]; then
            echo "错误：Clash 项目在 $API_URL 未找到（404）。"
            echo "可能原因：仓库已迁移或删除。请尝试以下替代方案："
            echo "尝试使用 Dreamacro/clash-premium 或其他来源。"
            # 尝试备用地址（例如 Clash Premium 的镜像）
            API_URL="https://api.github.com/repos/Dreamacro/clash-premium/releases/latest"
            API_RESPONSE=$(curl -s "$API_URL")
            echo "备用 API Response:"
            echo "$API_RESPONSE" | jq '.' || echo "Failed to parse backup API response"
          fi

          # 检查 .assets 是否存在
          ASSETS=$(echo "$API_RESPONSE" | jq -r '.assets')
          if [ "$ASSETS" == "null" ] || [ -z "$ASSETS" ]; then
            echo "错误：API 返回的 .assets 字段为空或不存在。"
            echo "请手动检查 Clash 项目状态或使用其他下载来源。"
            exit 1
          fi

          # 提取下载链接
          LATEST_URL=$(echo "$API_RESPONSE" | jq -r '.assets[] | select(.name | contains("linux-amd64")) | .browser_download_url')
          if [ -z "$LATEST_URL" ]; then
            echo "未能找到包含 'linux-amd64' 的下载链接，请检查资产名称或 API 数据。"
            exit 1
          fi

          # 下载并安装 Clash
          wget "$LATEST_URL" -O clash.gz
          gunzip clash.gz
          chmod +x clash
          sudo mv clash /usr/local/bin/clash
          clash -v

      - name: 生成 Clash 配置文件
        run: python generate_config.py

      - name: 运行测试脚本
        run: python test_nodes.py

      - name: 提交结果
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          git add data/sp.txt
          git commit -m "更新有效节点" || echo "无更改"
          git push
