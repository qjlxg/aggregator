name: Manually Test Clash Proxies

# 允许手动从 GitHub Actions UI 触发此工作流
on:
  workflow_dispatch:

jobs:
  test-and-upload-proxies:
    runs-on: ubuntu-latest # 使用最新的 Ubuntu 运行器

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 检出你的仓库代码

      - name: Set up Python
        uses: actions/setup-python@v5 # 设置 Python 环境
        with:
          python-version: '3.11' # 你可以指定一个具体的 Python 版本，如 3.9, 3.10, 3.11

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyyaml requests # 安装脚本所需的库

      - name: Verify required files and directories
        run: |
          echo "Checking for clash directory and its contents..."
          if [ ! -d "clash" ]; then
            echo "Error: 'clash' directory not found."
            exit 1
          fi
          if [ ! -f "clash/clash-linux" ]; then # GitHub Actions ubuntu-latest 是 Linux x86_64
            echo "Error: 'clash/clash-linux' binary not found."
            exit 1
          fi
          if [ ! -f "clash/Country.mmdb" ]; then
            echo "Error: 'clash/Country.mmdb' not found."
            exit 1
          fi
          echo "Required files seem to be present."
          
          echo "Setting execute permission for clash-linux..."
          chmod +x clash/clash-linux # 确保 clash-linux 是可执行的

          echo "Checking for input configuration data/clash.yaml..."
          if [ ! -f "data/clash.yaml" ]; then
            echo "Error: Input file 'data/clash.yaml' not found."
            # exit 1 # 你可以选择如果输入文件不存在是否让工作流失败
            echo "Warning: Input file 'data/clash.yaml' not found. Script might fail or produce empty output."
          fi
          
          # 确保 data 目录存在，脚本本身也会尝试创建它
          mkdir -p data

      - name: Run proxy test script
        run: python test_clash_nodes.py # 假设 test_clash_nodes.py 在仓库根目录

      - name: Upload results (sp.yaml)
        uses: actions/upload-artifact@v4 # 上传生成的 sp.yaml 文件
        with:
          name: valid-proxies-config # Artifact 的名字
          path: data/sp.yaml # 要上传的文件的路径
          if-no-files-found: warn # 如果 data/sp.yaml 未找到，发出警告 (脚本在没有有效代理时会创建一个空的 sp.yaml)
