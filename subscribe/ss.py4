import requests
from urllib.parse import urlparse
import base64
from concurrent.futures import ThreadPoolExecutor, as_completed
import os
#可用
# 请求头 (Request Headers)
headers = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Accept-Encoding': 'gzip, deflate'
}

# 配置参数 (Configuration Parameters)
# MAX_SUCCESS = 99999  # 需要获取的有效内容数量 (Currently not used to stop early)
TIMEOUT = 30         # 单次请求超时时间（秒）- Greatly reduced for faster failing on unresponsive URLs
OUTPUT_FILE = 'data/ss.txt' # Make sure 'data' directory can be created or exists

# Determine a reasonable number of worker threads for concurrency
# For I/O bound tasks like network requests, more threads can be beneficial
# os.cpu_count() might return None in some environments, provide a fallback.
cpu_cores = os.cpu_count()
if cpu_cores is None:
    MAX_WORKERS = 16 # Default if cpu_count is not available
else:
    MAX_WORKERS = min(32, cpu_cores + 4) # Cap at 32, or slightly more than CPU cores

def is_valid_url(url):
    """验证URL格式是否合法 (Validate if URL format is legal)"""
    try:
        result = urlparse(url)
        return all([result.scheme in ['http', 'https'], result.netloc])
    except:
        return False

def get_url_list(source_url):
    """从单个源URL获取URL列表 (Get URL list from a single source URL)"""
    print(f"正在从源获取URL列表: {source_url}")
    try:
        # Use a slightly longer timeout for fetching the main list, as it might be larger
        response = requests.get(source_url, headers=headers, timeout=60)
        response.raise_for_status() # Raise an exception for HTTP errors
        raw_urls = response.text.splitlines()
        valid_urls = [url.strip() for url in raw_urls if is_valid_url(url.strip())]
        print(f"从 {source_url} 获取到 {len(valid_urls)} 个有效URL")
        return valid_urls
    except Exception as e:
        print(f"获取URL列表失败 ({source_url}): {e}")
        return []

def process_url(url):
    """
    处理单个URL，获取内容。 (Process a single URL, get content)
    成功则返回解码后的内容，失败则返回None。 (Return decoded content on success, None on failure)
    """
    try:
        resp = requests.get(url, headers=headers, timeout=TIMEOUT)
        resp.raise_for_status() # Raise an exception for HTTP errors (4xx or 5xx)
        
        text_content = resp.text
        # 内容有效性检查 (Content validity check)
        if len(text_content.strip()) < 10 or "DOMAIN" in text_content or "port" in text_content or "proxies" in text_content:
            # print(f"内容无效 ({url}): 内容过短或包含禁用词") # Optional: for more verbose logging
            return None # Invalid content based on rules
        
        # 尝试Base64解码 (Attempt Base64 decoding)
        try:
            # Assuming the content is Base64 encoded text that decodes to UTF-8
            decoded_content = base64.b64decode(text_content).decode('utf-8')
            return decoded_content
        except base64.binascii.Error:
            # print(f"Base64 解码失败 ({url}): {e}") # Optional
            return None
        except UnicodeDecodeError:
            # print(f"解码后内容无法转换为 UTF-8 字符串 ({url}): {e}") # Optional
            return None
        
    except requests.exceptions.Timeout:
        # print(f"请求超时 ({url})") # Optional: for verbose logging of timeouts
        return None
    except requests.exceptions.RequestException:
        # print(f"请求失败 ({url}): {e}") # Optional: for verbose logging of other request errors
        return None
    except Exception: # Catch any other unexpected errors during processing
        # print(f"处理URL时发生未知错误 ({url}): {e}") # Optional
        return None

# 主程序 (Main Program)
source_urls = [
    'https://github.com/qjlxg/aggregator/raw/refs/heads/main/data/subscribes.txt',
    # 你可以在这里添加更多的源URL (You can add more source URLs here)
    # 'another_source_url_here.txt',
]

print(f"开始处理URL。单个URL超时: {TIMEOUT}秒, 最大并发线程数: {MAX_WORKERS}")

# 获取所有有效的URL (Get all valid URLs)
all_valid_urls = []
for source_url in source_urls:
    valid_urls_from_source = get_url_list(source_url)
    all_valid_urls.extend(valid_urls_from_source)

if not all_valid_urls:
    print("没有获取到任何有效URL，程序退出。(No valid URLs obtained, program will exit.)")
    exit()

print(f"总共获取到 {len(all_valid_urls)} 个有效URL，准备处理...")

# 处理URL并保存内容 (Process URLs and save content)
success_count = 0
processed_count = 0 # This will count futures as they complete

# Ensure the output directory exists
output_dir = os.path.dirname(OUTPUT_FILE)
if output_dir: # If OUTPUT_FILE includes a directory path
    os.makedirs(output_dir, exist_ok=True)

with open(OUTPUT_FILE, 'w', encoding='utf-8') as out_file:
    # Using ThreadPoolExecutor to process URLs concurrently
    with ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
        # Submit all tasks (process_url function for each url) to the executor
        # Create a dictionary to map futures to URLs for easier error reporting or context
        future_to_url = {executor.submit(process_url, url): url for url in all_valid_urls}
        
        total_tasks = len(future_to_url)
        print(f"已提交 {total_tasks} 个任务到线程池进行处理。")

        # Process futures as they complete
        for i, future in enumerate(as_completed(future_to_url)):
            url_processed = future_to_url[future] # Get the original URL for context
            processed_count += 1
            
            try:
                content = future.result() # Get the result from process_url (decoded content or None)
                if content:
                    out_file.write(content)
                    # Ensure there's a newline after each piece of content if it doesn't end with one.
                    # This helps separate entries in the output file.
                    if not content.endswith('\n'):
                        out_file.write('\n')
                    success_count += 1
                # else:
                    # Optional: Log failure or invalid content for this specific URL if needed
                    # print(f"处理失败或内容无效: {url_processed}")
            except Exception as exc:
                # This catches exceptions if future.result() itself fails,
                # or if process_url raised an unexpected exception not caught internally
                print(f"URL {url_processed} 在执行期间产生错误: {exc}")
            
            # 显示进度 (Display progress)
            # Print progress every 10 URLs or on the last URL
            if processed_count % 10 == 0 or processed_count == total_tasks:
                print(f"[进度] 已处理 {processed_count}/{total_tasks} 个 | 成功 {success_count} 个")

# 最终报告 (Final Report)
print("\n" + "=" * 50)
print(f"最终结果：")
print(f"尝试处理URL总数 (Total URLs submitted for processing)：{len(all_valid_urls)}")
print(f"实际完成处理数 (Actually completed processing)：{processed_count}")
print(f"成功获取内容数 (Successfully fetched content)：{success_count}")
if processed_count > 0:
    # Base percentage on completed tasks, as some might fail unexpectedly before process_url logic
    print(f"有效内容率 (Success rate based on completed tasks)：{success_count/processed_count:.1%}")
else:
    print("没有处理任何URL (No URLs were processed).")
print(f"结果文件已保存至 (Results saved to)：{OUTPUT_FILE}")
